#!/bin/bash
#PJM -L "node=1"
#PJM -L "rscgrp=small"
#PJM --mpi "max-proc-per-node=10"
#PJM -L "elapse=72:00:00"
#PJM -L "freq=2000,eco_state=2,retention_state=0"
#PJM -x PJM_LLIO_GFSCACHE=/jG5wuqbRoLbDgsh4U8DNjg==   
#PJM -j
#PJM -S

export PLE_MPI_STD_EMPTYFILE=off
export XOS_MMM_L_PAGING_POLICY="demand:demand:demand"
export XOS_MMM_L_ARENA_LOCK_TYPE=0
export OMP_PROC_BIND=close 
export OMP_NUM_THREADS=4

. setup-env.sh
spack load /sq6mxek
spack load /dox3gz6

export LD_LIBRARY_PATH=/lib64:$LD_LIBRARY_PATH
# PJM_BULKNUM=1

iter=1

# export OMP_NUM_THREADS=4
# number of processes to run in parallel
NPARA=10

# number process to run as steps
NSTEP=10


# Variables for createGenesisInputStep
constantK="20000"
pixel_size="0.864"
integrator="INTEGRATOR_LEAPFROG"
time_step="0.002"
n_steps="20000"
forcefield="FORCEFIELD_CAGO"
simulationType="SIMULATION_LEAP"

# Common files
ATDYN='atdyn'
VCOOR="vcode1"

run_simulation() {
    #export FLIB_CPUBIND=OFF
    num_simulations=$1
    iter=$2

    # Logging setup
    simulation=$(printf "%06d" "$num_simulations")
    iterations="iter_$(printf "%03d" "$iter")"

    # Step 1: makePathStep
    MDSPACE_HOME=$(pwd) 
    HOME=$(dirname "$MDSPACE_HOME")
    SIMULATION="${MDSPACE_HOME}/simulations"
    TOPLEVEL=$(printf "%04d" $(( (num_simulations - 1) / 10000 )))
    WORKDIR="${SIMULATION}/${TOPLEVEL}/${simulation}/${iterations}"
    SCRIPTS="${MDSPACE_HOME}/utils"
    COMMONINPs="common_inputs"


    logStep() {
        stepNumber=$1
        stepMessage=$2
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Step $stepNumber: $stepMessage" >> "$LogFileName"
    }

    LogFileName="log_2_runSimulations.log"
    # Step 4: convertInputEMStep
    logStep "convertInputEMStep started"

    metaEMxmd="$MDSPACE_HOME/EM_data/inputEM.xmd"
    inputEMxmd="$WORKDIR/inputEM_${simulation}.xmd"

    # Make xmd file
    python "splitInputXmd.py" -i "$metaEMxmd" -o "$inputEMxmd" -id "$num_simulations"

    logStep "convertInputEMStep finished"

    # Step 5: createGenesisInputStep
    createGenesisInputStep=$((5 + (iter - 1) * 8))
    logStep $createGenesisInputStep "createGenesisInputStep started"

    inputEMprefix="inputEM_${simulation}.spi"
    genesisInp="INPUT_${simulation}"
    inputPDBprefix="inputPDB_000001_${iterations}"
    rstFile="inputPDB_000001_${iterations}.rst"
    outputPrefix="output_${simulation}_${iterations}"
    inputType="INPUT_RESTART"

    electrostatics="ELECTROSTATICS_CUTOFF"
    ensemble="ENSEMBLE_NVT"
    temperature="50"
    boundary="BOUNDARY_NOBC"
    tpcontrol="TPCONTROL_LANGEVIN"

    # Change the settings of GENESIS INPUT file here
    python "createGenesisInput.py" \
        --inp_file "$genesisInp" \
        --inputEMxmd "$inputEMxmd" \
        --outputPrefix "$outputPrefix" \
        --inputPDBprefix "$inputPDBprefix" \
        --inputEMprefix "$inputEMprefix" \
        --inputType "$inputType" \
        --rstFile "$rstFile" \
        --forcefield "$forcefield" \
        --simulationType "$simulationType" \
        --electrostatics "$electrostatics" \
        --integrator "$integrator" \
        --time_step "$time_step" \
        --n_steps "$n_steps" \
        --ensemble "$ensemble" \
        --temperature "$temperature" \
        --boundary "$boundary" \
        --tpcontrol "$tpcontrol" \
        --constantK "$constantK" \
        --pixel_size "$pixel_size" \
        --common_inputs "$COMMONINPs" 

    logStep $createGenesisInputStep "createGenesisInputStep finished"

    # Step 6: Run MD simulation using GENESIS2.0
    runMDsimulation=$((6 + (iter - 1) * 8))
    logStep $runMDsimulation "run MD simulation using GENESIS2.1 started"

    genesisOutput="$WORKDIR/output_${simulation}_${iterations}.log"

    mpiexec --of-proc output --vcoordfile $VCOOR ${ATDYN} "${genesisInp}" &

    # go back to the MDSPACE_HOME dir
    cd $MDSPACE_HOME
    logStep $runMDsimulation " run MD simulation using GENESIS2.1 finished"
}

# job control
for ((i=0; i<$NSTEP; i++)); do
    starting=$(($IFIRST + ($i*$NPARA)))
    ending=$(($starting + $NPARA - 1))
    echo "going to run simulations: ($starting, $ending) ..."
    for num_simulations in $(seq $starting $ending); do
        export FLIB_CPUBIND=OFF
        echo "running $num_simulations"
        run_simulation $num_simulations $iter  
    done
    echo waiting
    date
    wait
    echo done
    date
done
